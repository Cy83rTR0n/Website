<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fuzzing on Reverse Engineering Blog</title><link>https://Cy83rTR0n.github.io/website/tags/fuzzing/</link><description>Recent content in Fuzzing on Reverse Engineering Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 25 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://Cy83rTR0n.github.io/website/tags/fuzzing/index.xml" rel="self" type="application/rss+xml"/><item><title>Fuzzing - 1</title><link>https://Cy83rTR0n.github.io/website/posts/fuzzing-basics/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://Cy83rTR0n.github.io/website/posts/fuzzing-basics/</guid><description>Fuzzers and Fuzzing Introduction Fuzzing is a software testing method that involves sending random or unexpected input to a program to uncover vulnerabilites and bugs. The process includes generating diverse inputs, injecting them into the target software, and observing how it reacts. If the program crashes or exhibits unexpected behavior, it signals potential issues. Fuzzing is valuable for finding security vulnerabilities, and it comes in various types like random, mutation-based and generation-based fuzzing.</description></item></channel></rss>